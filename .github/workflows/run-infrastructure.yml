name: Deploy wordpress EC2 with notification

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
         aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
         aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
         aws-region: eu-central-1

      - name: Set environment variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> $GITHUB_ENV

      - name: Install packer
        id: install_packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          sudo apt update && sudo apt install packer
        continue-on-error: true

      - name: Install Terraform
        id: install_terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor --batch --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y packer terraform
        continue-on-error: true

      - name: Build AMI with Packer
        id: build_ami
        run: |
          cd packer
          packer init .
          packer validate .
          AMI_ID=$(packer build -machine-readable . | tee build.log grep 'artifact,0,id' build.log | cut -d, -f6 | cut -d: -f2) 
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create ec2 with terraform
        id: create_ec2
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var "ami_id=$AMI_ID"
        continue-on-error: true

      - name: Send notifications to Telegram
        run: |
          MESSAGE=""

          if [ "${{ steps.install_tools.outcome }}" == "success" ]; then
            MESSAGE+="✅ Packer and Terraform installation succeeded.\n"
          else
            MESSAGE+="❌ Packer and Terraform installation failed.\n"
          fi

          if [ "${{ steps.build_ami.outcome }}" == "success" ]; then
            MESSAGE+="✅ AMI creation succeeded.\n"
          else
            MESSAGE+="❌ AMI creation failed.\n"
          fi

          if [ "${{ steps.create_ec2.outcome }}" == "success" ]; then
            MESSAGE+="✅ EC2 instance creation succeeded.\n"
          else
            MESSAGE+="❌ EC2 instance creation failed.\n"
          fi

          FORMATTED_MESSAGE=$(echo -e "$MESSAGE" | sed ':a;N;$!ba;s/\n/%0A/g')

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
               -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
               -d parse_mode="Markdown" \
               -d text="$FORMATTED_MESSAGE"